Exercise 5: Task Management System

Understanding Linked Lists
Singly Linked List:
A singly linked list is a data structure consisting of nodes where each node contains a data part and a reference (or link) to the next node in the sequence. The first node is known as the head, and the last node points to null, indicating the end of the list.

Doubly Linked List:
A doubly linked list is similar to a singly linked list, but each node contains two references: one to the next node and one to the previous node. This allows traversal in both directions, forward and backward, making operations like deletion or insertion before a given node more efficient.

Time Complexity

Time Complexity:

Addition of a Task: Adding a task to the end of a singly linked list takes O(n) time, where n is the number of nodes in the list, because it requires traversing the entire list to find the last node.

Searching for a Task: Searching for a task by its ID involves traversing the list, which takes O(n) time in the worst case.

Traversal of Tasks: Traversing all tasks to display them takes O(n) time, as each node needs to be visited.

Deletion of a Task: Deleting a task requires finding the task first, which takes O(n) time. Once the task is found, the deletion itself is O(1), making the overall complexity O(n).

Advantages of Linked Lists over Arrays for Dynamic Data:

Dynamic Size: Linked lists can grow and shrink in size by adding or removing nodes, unlike arrays, which have a fixed size or require memory-consuming resizing operations.

Ease of Insertion/Deletion: Inserting or deleting elements in a linked list is generally more efficient than in an array, especially with large datasets. In a linked list, these operations involve only changing the references (pointers), while in an array, elements may need to be shifted.

Memory Utilization: Linked lists use memory more efficiently when handling a large number of insertions and deletions. Arrays may allocate more memory than needed, leading to wasted space, or may require resizing, leading to additional overhead.